import React, { useState, useEffect } from 'react';
import { Container, Card, Form, Button, Row, Col, ListGroup, Badge } from 'react-bootstrap';
import { useNavigate, Link } from 'react-router-dom';
import { useWorkshop } from '../context/WorkshopContext';

const Worksheet5 = () => {
  const navigate = useNavigate();
  const { 
    threatHunting, 
    setThreatHunting,
    worksheetProgress,
    setWorksheetProgress
  } = useWorkshop();
  
  const [currentStep, setCurrentStep] = useState(1);
  
  // Sample AI-suggested hunting hypotheses
  const sampleHypotheses = [
    {
      id: 'hyp-1',
      title: 'Anomalous PowerShell Execution',
      description: 'Based on recent threat intelligence about APT-X, search for instances of PowerShell executing with encoded commands and connecting to newly observed domains.',
      confidence: 'High',
      relevance: 'Critical'
    },
    {
      id: 'hyp-2',
      title: 'Unusual Service Creation',
      description: 'Recent intelligence indicates threat actors using legitimate Windows services for persistence. Search for services created outside of system updates or approved software installations.',
      confidence: 'Medium',
      relevance: 'High'
    },
    {
      id: 'hyp-3',
      title: 'Suspicious Registry Modifications',
      description: 'Based on tactics observed in recent campaigns, look for modifications to Run keys or AppInit_DLLs registry values by non-standard processes.',
      confidence: 'Medium',
      relevance: 'Medium'
    }
  ];
  
  // Sample YARA rule generated by AI
  const sampleYaraRule = `rule Suspicious_PowerShell_Execution {
    meta:
        description = "Detects encoded PowerShell commands potentially used for obfuscation"
        author = "AI Assistant"
        reference = "APT-X Campaign Analysis"
        confidence = "Medium"
    
    strings:
        $ps = "powershell" nocase
        $enc_flag = "-enc" nocase
        $enc_full = "-EncodedCommand" nocase
        $hidden = "-w hidden" nocase
        $noninteractive = "-NonInteractive" nocase
    
    condition:
        $ps and (($enc_flag or $enc_full) and ($hidden or $noninteractive))
}`;

  // Sample Sigma rule generated by AI
  const sampleSigmaRule = `title: Suspicious PowerShell Execution With Encoded Commands
id: 5f06a3f9-4a3a-47a8-9e4f-ec9a6f39897a
status: experimental
description: Detects PowerShell execution with encoded commands that may indicate obfuscated malicious activity
author: AI Assistant
references:
  - APT-X Campaign Analysis
logsource:
  product: windows
  service: powershell
detection:
  selection:
    CommandLine|contains|all:
      - 'powershell'
      - '-enc'
    CommandLine|contains|any:
      - '-w hidden'
      - '-NonInteractive'
  condition: selection
falsepositives:
  - Administrative PowerShell scripts
  - Some legitimate software installations
level: medium`;

  // Calculate progress
  useEffect(() => {
    let progress = 0;
    
    // Check if a hypothesis is selected
    if (threatHunting.selectedHypothesis) {
      progress += 30;
    }
    
    // Check detection rules
    if (threatHunting.detectionRules.yaraRule || threatHunting.detectionRules.sigmaRule) {
      progress += 35;
    }
    
    // Check user feedback
    if (threatHunting.userFeedback.length > 10) {
      progress += 35;
    }
    
    setWorksheetProgress({
      ...worksheetProgress,
      worksheet5: progress
    });
  }, [threatHunting, worksheetProgress, setWorksheetProgress]);
  
  // Handle hypothesis selection
  const handleHypothesisSelect = (hypothesisId) => {
    const selectedHypothesis = sampleHypotheses.find(h => h.id === hypothesisId);
    setThreatHunting({
      ...threatHunting,
      aiSuggestedHypotheses: sampleHypotheses,
      selectedHypothesis: hypothesisId
    });
  };
  
  // Handle user feedback input
  const handleFeedbackChange = (e) => {
    setThreatHunting({
      ...threatHunting,
      userFeedback: e.target.value
    });
  };
  
  // Handle next step
  const handleNextStep = () => {
    if (currentStep < 3) {
      setCurrentStep(currentStep + 1);
    } else {
      // If we've set detection rules in step 3, save them before navigating
      if (currentStep === 3 && !threatHunting.detectionRules.yaraRule) {
        setThreatHunting({
          ...threatHunting,
          detectionRules: {
            yaraRule: sampleYaraRule,
            sigmaRule: sampleSigmaRule
          }
        });
      }
      navigate('/worksheet-6');
    }
  };
  
  // Handle previous step
  const handlePrevStep = () => {
    if (currentStep > 1) {
      setCurrentStep(currentStep - 1);
    } else {
      navigate('/worksheet-4');
    }
  };
  
  return (
    <Container className="py-4">
      <Row className="justify-content-center">
        <Col lg={10}>
          <Card className="shadow-sm">
            <Card.Header className="bg-gradient" style={{ background: 'var(--cyware-gradient)' }}>
              <h4 className="mb-0 text-white">Exercise 5: Proactive Threat Hunting & Detection</h4>
              <div className="text-white-50 small">Leveraging GenAI for guided threat hunting and detection rule creation</div>
            </Card.Header>
            <Card.Body className="p-4">
              
              {currentStep === 1 && (
                <div>
                  <h5 className="mb-3">Step 1: AI-Generated Threat Hunting Hypotheses</h5>
                  <div className="bg-light p-3 mb-4 rounded">
                    <div className="d-flex align-items-center mb-3">
                      <div className="me-3 p-2 rounded-circle" style={{ background: 'rgba(13, 110, 253, 0.1)' }}>
                        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                          <path d="M12 22C17.5228 22 22 17.5228 22 12C22 6.47715 17.5228 2 12 2C6.47715 2 2 6.47715 2 12C2 17.5228 6.47715 22 12 22Z" stroke="#0d6efd" strokeWidth="2" />
                          <path d="M12 16V12" stroke="#0d6efd" strokeWidth="2" strokeLinecap="round" />
                          <path d="M12 8H12.01" stroke="#0d6efd" strokeWidth="2" strokeLinecap="round" />
                        </svg>
                      </div>
                      <div>
                        <h6 className="mb-1">AI Assistant Analysis</h6>
                        <p className="mb-0 text-muted">
                          Based on the latest threat intelligence I've analyzed, I've generated the following hunting hypotheses that might be relevant to your environment. These are derived from recent threat actor activities and emerging threats.
                        </p>
                      </div>
                    </div>
                  </div>
                  
                  <p className="mb-3">Select a hypothesis to explore further:</p>
                  
                  <ListGroup className="mb-4">
                    {sampleHypotheses.map((hypothesis) => (
                      <ListGroup.Item 
                        key={hypothesis.id}
                        action 
                        active={threatHunting.selectedHypothesis === hypothesis.id}
                        onClick={() => handleHypothesisSelect(hypothesis.id)}
                        className="d-flex align-items-start"
                      >
                        <div className="ms-2 me-auto">
                          <div className="fw-bold d-flex align-items-center">
                            {hypothesis.title}
                            <Badge bg={hypothesis.relevance === 'Critical' ? 'danger' : 
                                       hypothesis.relevance === 'High' ? 'warning' : 'info'} 
                                   className="ms-2">
                              {hypothesis.relevance}
                            </Badge>
                          </div>
                          <div className="mt-1">{hypothesis.description}</div>
                          <div className="mt-1 small text-muted">Confidence: {hypothesis.confidence}</div>
                        </div>
                      </ListGroup.Item>
                    ))}
                  </ListGroup>
                </div>
              )}
              
              {currentStep === 2 && (
                <div>
                  <h5 className="mb-3">Step 2: AI-Generated Detection Rules</h5>
                  
                  <div className="bg-light p-3 mb-4 rounded">
                    <div className="d-flex align-items-center mb-3">
                      <div className="me-3 p-2 rounded-circle" style={{ background: 'rgba(13, 110, 253, 0.1)' }}>
                        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                          <path d="M12 22C17.5228 22 22 17.5228 22 12C22 6.47715 17.5228 2 12 2C6.47715 2 2 6.47715 2 12C2 17.5228 6.47715 22 12 22Z" stroke="#0d6efd" strokeWidth="2" />
                          <path d="M12 16V12" stroke="#0d6efd" strokeWidth="2" strokeLinecap="round" />
                          <path d="M12 8H12.01" stroke="#0d6efd" strokeWidth="2" strokeLinecap="round" />
                        </svg>
                      </div>
                      <div>
                        <h6 className="mb-1">AI Assistant Analysis</h6>
                        <p className="mb-0 text-muted">
                          Based on the selected hypothesis, I've generated detection rules to help you identify this behavior in your environment. These rules are starting points and may need refinement for your specific environment.
                        </p>
                      </div>
                    </div>
                  </div>
                  
                  <div className="mb-4">
                    <h6>Selected Hypothesis</h6>
                    {threatHunting.selectedHypothesis && (
                      <div className="p-3 border rounded">
                        <h6 className="fw-bold">
                          {sampleHypotheses.find(h => h.id === threatHunting.selectedHypothesis)?.title}
                        </h6>
                        <p className="mb-0">
                          {sampleHypotheses.find(h => h.id === threatHunting.selectedHypothesis)?.description}
                        </p>
                      </div>
                    )}
                  </div>
                  
                  <Row className="mb-4">
                    <Col md={6}>
                      <h6 className="mb-2">YARA Rule</h6>
                      <div className="bg-dark text-light p-3 rounded" style={{ fontSize: '0.85rem' }}>
                        <pre className="mb-0" style={{ whiteSpace: 'pre-wrap' }}>{sampleYaraRule}</pre>
                      </div>
                    </Col>
                    <Col md={6}>
                      <h6 className="mb-2">Sigma Rule</h6>
                      <div className="bg-dark text-light p-3 rounded" style={{ fontSize: '0.85rem' }}>
                        <pre className="mb-0" style={{ whiteSpace: 'pre-wrap' }}>{sampleSigmaRule}</pre>
                      </div>
                    </Col>
                  </Row>
                </div>
              )}
              
              {currentStep === 3 && (
                <div>
                  <h5 className="mb-3">Step 3: Your Feedback</h5>
                  
                  <div className="bg-light p-3 mb-4 rounded">
                    <div className="d-flex align-items-center mb-3">
                      <div className="me-3 p-2 rounded-circle" style={{ background: 'rgba(13, 110, 253, 0.1)' }}>
                        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                          <path d="M12 22C17.5228 22 22 17.5228 22 12C22 6.47715 17.5228 2 12 2C6.47715 2 2 6.47715 2 12C2 17.5228 6.47715 22 12 22Z" stroke="#0d6efd" strokeWidth="2" />
                          <path d="M12 16V12" stroke="#0d6efd" strokeWidth="2" strokeLinecap="round" />
                          <path d="M12 8H12.01" stroke="#0d6efd" strokeWidth="2" strokeLinecap="round" />
                        </svg>
                      </div>
                      <div>
                        <h6 className="mb-1">Human-AI Collaboration</h6>
                        <p className="mb-0 text-muted">
                          Your expertise is crucial for evaluating and refining AI-generated content. Please provide feedback on the hypothesis and detection rules to improve their accuracy and effectiveness.
                        </p>
                      </div>
                    </div>
                  </div>
                  
                  <Form.Group className="mb-4">
                    <Form.Label>
                      <strong>What modifications would you make to these detection rules for your environment?</strong>
                    </Form.Label>
                    <Form.Control 
                      as="textarea" 
                      rows={5}
                      value={threatHunting.userFeedback}
                      onChange={handleFeedbackChange}
                      placeholder="Consider: Additional conditions to reduce false positives? Additional data sources to monitor? Environmental specifics that would require modifications?"
                    />
                  </Form.Group>
                  
                  <div className="bg-light p-3 rounded">
                    <h6 className="mb-3">Key Takeaways: AI for Detection Engineering</h6>
                    <ul className="mb-0">
                      <li className="mb-2">GenAI can rapidly generate detection rules based on intelligence, but human verification is essential</li>
                      <li className="mb-2">Environmental context and tuning from security professionals greatly improve detection quality</li>
                      <li className="mb-2">The combination of AI-generated starting points with human expertise creates more efficient detection engineering</li>
                      <li>Threat hunting hypotheses benefit from both machine pattern recognition and human intuition</li>
                    </ul>
                  </div>
                </div>
              )}
              
              <div className="d-flex justify-content-between mt-4">
                {currentStep === 1 ? (
                  <Button 
                    variant="secondary" 
                    onClick={() => window.location.href = '/worksheet-4'}
                  >
                    Previous Exercise
                  </Button>
                ) : (
                  <Button variant="secondary" onClick={handlePrevStep}>Previous Step</Button>
                )}
                
                {currentStep === 3 ? (
                  <Button 
                    variant="primary" 
                    onClick={() => window.location.href = '/worksheet-6'}
                  >
                    Next Exercise
                  </Button>
                ) : (
                  <Button 
                    variant="primary" 
                    onClick={handleNextStep}
                    disabled={(currentStep === 1 && !threatHunting.selectedHypothesis)}
                  >
                    Next Step
                  </Button>
                )}
              </div>
            </Card.Body>
            <Card.Footer>
              <div className="d-flex justify-content-between align-items-center">
                <div>Step {currentStep} of 3</div>
                <div>Exercise Progress: {worksheetProgress.worksheet5}%</div>
              </div>
            </Card.Footer>
          </Card>
        </Col>
      </Row>
    </Container>
  );
};

export default Worksheet5;
